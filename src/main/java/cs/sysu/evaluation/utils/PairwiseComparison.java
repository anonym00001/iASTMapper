package cs.sysu.evaluation.utils;

import cs.sysu.algorithm.element.ProgramElement;
import cs.sysu.algorithm.matcher.mappings.ElementMappings;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * ICSE paper points out that if two algorithms inconsistently map an element, at least one algorithm makes mistakes.
 *
 * Based on this, we perform comparison between our mappings with the mappings generated by other algorithms.
 * If our algorithm and another algorithm inconsistently maps a stmt or a token, we record our mapping for the stmt.
 */
public class PairwiseComparison {
    private ElementMappings eleMappings1;
    private ElementMappings eleMappings2;
    private List<ProgramElement> srcElements;
    private List<ProgramElement> dstElements;

    private Set<ProgramElement> inconsistentlyMappedElements;

    public PairwiseComparison(ElementMappings eleMappings1, ElementMappings eleMappings2,
                              List<ProgramElement> srcElements,
                              List<ProgramElement> dstElements) {
        this.eleMappings1 = eleMappings1;
        this.eleMappings2 = eleMappings2;
        this.srcElements = srcElements;
        this.dstElements = dstElements;
        this.inconsistentlyMappedElements = new HashSet<>();
        calMappingDiff();
    }

    public Set<ProgramElement> getInconsistentlyMappedElements() {
        return inconsistentlyMappedElements;
    }

    private boolean isEqual(ProgramElement element1, ProgramElement element2) {
        if (element1 == null && element2 == null)
            return true;
        if (element1 != null && element2 == null)
            return false;
        return element2.equals(element1);
    }

    private boolean isInconsistentlyMapped(ProgramElement element){
        ProgramElement element1 = eleMappings1.getMappedElement(element);
        ProgramElement element2 = eleMappings2.getMappedElement(element);
        return !isEqual(element1, element2);
    }

    private void calMappingDiff(){
        for (ProgramElement srcElement: srcElements){
            if (isInconsistentlyMapped(srcElement)){
                inconsistentlyMappedElements.add(srcElement);
            }
        }

        for (ProgramElement dstElement: dstElements){
            if (isInconsistentlyMapped(dstElement)) {
                inconsistentlyMappedElements.add(dstElement);
            }
        }
    }
}
